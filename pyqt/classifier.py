# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QFileDialog

import pickle
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import cv2

from os import listdir
from osgeo import gdal
from scipy import stats
from xgboost import XGBClassifier
from tensorflow.keras import layers, models

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(505, 383)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.editIn = QtWidgets.QTextEdit(self.centralwidget)
        self.editIn.setGeometry(QtCore.QRect(90, 40, 311, 21))
        self.editIn.setObjectName("editIn")

        self.editInFile = QtWidgets.QPushButton(self.centralwidget)
        self.editInFile.setGeometry(QtCore.QRect(410, 40, 31, 23))
        self.editInFile.setObjectName("editInFile")

        self.editOut = QtWidgets.QTextEdit(self.centralwidget)
        self.editOut.setGeometry(QtCore.QRect(90, 90, 311, 21))
        self.editOut.setObjectName("editOut")

        self.editoutFile = QtWidgets.QPushButton(self.centralwidget)
        self.editoutFile.setGeometry(QtCore.QRect(410, 90, 31, 21))
        self.editoutFile.setObjectName("editoutFile")

        self.checkBoxShImg = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBoxShImg.setGeometry(QtCore.QRect(90, 130, 121, 21))
        self.checkBoxShImg.setObjectName("checkBoxShImg")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(290, 260, 141, 31))
        self.pushButton.setObjectName("pushButton")

        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(90, 210, 351, 21))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(90, 20, 51, 16))
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(90, 70, 51, 16))
        self.label_2.setObjectName("label_2")

        self.ProgLabel = QtWidgets.QLabel(self.centralwidget)
        self.ProgLabel.setGeometry(QtCore.QRect(100, 210, 310, 21))
        self.ProgLabel.setObjectName("ProgLabel")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 505, 21))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.addedUI()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.editInFile.setText(_translate("MainWindow", "..."))
        self.editoutFile.setText(_translate("MainWindow", "..."))
        self.checkBoxShImg.setText(_translate("MainWindow", "show image"))
        self.pushButton.setText(_translate("MainWindow", "process"))
        self.label.setText(_translate("MainWindow", "Input file"))
        self.label_2.setText(_translate("MainWindow", "Output file"))
        self.ProgLabel.setText(_translate("MainWindow", "None"))
    
    def addedUI(self):
        self.Img = None

        self.infile = ""
        self.outfile = ""

        self.editIn.setReadOnly(True)
        self.editOut.setReadOnly(True)

        self.editInFile.clicked.connect(self.editInput)
        self.editoutFile.clicked.connect(self.editOutput)
        self.pushButton.clicked.connect(self.clssify)
    
    def editInput(self):
        self.infile = str(QFileDialog.getExistingDirectory(MainWindow, "Select Directory"))
        self.editIn.setPlainText(self.infile)
        self.openImg1C()

        if self.checkBoxShImg.isChecked():
            self.showImgGUI()
    
    def editOutput(self):
        self.outfile = str(QFileDialog.getExistingDirectory(MainWindow, "Select Directory"))
        self.editOut.setPlainText(self.outfile)

    def openImg1C(self):

        path = self.infile
        path += "\\GRANULE"
        path += "\\" + listdir(path)[0] + "\\IMG_DATA"

        self.progressBar.setProperty("value", 0)

        bands = list()
        ind = 0
        for i in range(13):
            band_file = listdir(path)[i]
            self.ProgLabel.setText("reading " + band_file)
            band = gdal.Open(path + "\\" + band_file, gdal.GA_ReadOnly)
            bands.append(band.GetRasterBand(1).ReadAsArray())
            ind+=1
            self.progressBar.setProperty("value", 5*ind/1.3)
        
        shape = bands[1].shape
        full_image = np.zeros((shape[0], shape[1], 13), dtype=np.float32)

        for i in range(13):
            band = bands[i]
            self.ProgLabel.setText("Resizing bands {0}/13".format(i + 1))
            resized = cv2.resize(band[:, :], shape)
            full_image[:, :, i] = resized
            self.progressBar.setProperty("value", (5*(i+1) + 65)/1.3)

        self.Img = full_image

    def show_img(self, img):
        VIS = np.zeros((img[:,:, 0].shape[0], img[:,:, 0].shape[1], 3), dtype=np.float32)
        VIS[:,:,0] = img[:,:,3]
        VIS[:,:,1] = img[:,:,2]
        VIS[:,:,2] = img[:,:,1]
        
        mean, sigma = np.mean(VIS), np.std(VIS)
        conf_int = stats.norm.interval(0.95, loc=mean, scale=sigma)
        
        VIS = VIS / conf_int[1]
        
        return VIS
    
    def showImgGUI(self):
        self.ProgLabel.setText("Converting to rgb")
        VIS = self.show_img(self.Img)
        self.ProgLabel.setText("Plotting")
        fig = plt.figure(figsize=(20, 20))
        plt.imshow(VIS)

        print(self.outfile + "\\satellite image rgb.png")

        self.ProgLabel.setText("Saving to " + "\\satellite image rgb.png")
        fig.savefig(self.outfile + "\\satellite image rgb.png")
    
    def clssify(self):
        scalers = list()

        self.ProgLabel.setText("loading scalers")
        with open('scalers.pickle', 'rb') as file:
            scalers = pickle.load(file)

        self.ProgLabel.setText("normalizing data")
        scaled = np.zeros((self.Img.shape[0], self.Img.shape[1], 13), dtype=np.float32)
        for channel in range(13):
            scaled[:, :, channel] = scalers[channel].transform(self.Img[:, :, channel].reshape(-1, 1)).reshape(self.Img.shape[0], self.Img.shape[1])
        SHAPE = scaled.shape

        self.ProgLabel.setText("splitting into patches")
        patches = list()
        for x in range(0, scaled.shape[0] - 64, 64):
            if x == scaled.shape[0] - 64:
                tmp = scaled[-64:, :, :]
            else:
                tmp = scaled[x : x+64, :, :]
            for y in range(0, scaled.shape[1] - 64, 64):
                if y == scaled.shape[1] - 64:
                    patches.append(tmp[:, -64:, :])
                else:
                    patches.append(tmp[:, y : y + 64, :])
        patches = np.array(patches)

        del scaled, tmp

        self.ProgLabel.setText("loading model")

        model = models.Sequential()
        model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 13)))
        model.add(layers.BatchNormalization())
        model.add(layers.Conv2D(32, (5, 5), strides=2, activation='relu', padding='same'))
        model.add(layers.BatchNormalization())
        model.add(layers.Dropout(0.3))
        model.add(layers.Conv2D(64, (3, 3), activation='relu'))
        model.add(layers.BatchNormalization())
        model.add(layers.Conv2D(64, (5, 5),strides = 2,padding='same', activation='relu'))
        model.add(layers.BatchNormalization())
        model.add(layers.Dropout(0.3))
        model.add(layers.Conv2D(92, (3, 3), activation='relu'))
        model.add(layers.BatchNormalization())
        model.add(layers.Conv2D(92, (5, 5), strides = 2,padding='same', activation='relu'))
        model.add(layers.BatchNormalization())
        model.add(layers.Dropout(0.3))
        model.add(layers.Flatten())
        model.add(layers.Dense(256, activation='relu'))
        model.add(layers.BatchNormalization())
        model.add(layers.Dropout(0.3))
        model.add(layers.Dense(10, activation='softmax'))

        model.compile(optimizer='adam',
                    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                    metrics=['accuracy'])
        
        model.load_weights('tf-CNN-97%.ckpt')
        model.pop()
        model.pop()
        model.pop()
        model.pop()
        model.summary()

        self.ProgLabel.setText("processing patches Conv")
        X_conv = model.predict(patches)

        del patches

        with open('xgboost-conv-98,1%.pickle', 'rb') as file:
            model = pickle.load(file)
        
        self.ProgLabel.setText("processing patches boost")

        res = model.predict(X_conv)

        del X_conv

        self.ProgLabel.setText("making image")

        colors = [[165,42,42], #Annual Crop
                [0, 106, 0], #Forest
                [0, 255, 0], #HerbaceousVegetation
                [220, 220, 220], #Highway
                [255,255,0], #Industrial
                [218,165,32], #Pasture
                [0,250,154], #PermanentCrop
                [255, 0, 0], #Residential
                [0, 200, 255], #River
                [0, 0, 255], #SeaLake
                ]
        
        color_map = np.zeros((SHAPE[0], SHAPE[1], 3), dtype=np.uint16)
        index = 0
        for x in range(0, self.Img.shape[0] - 64, 64):
            for y in range(0, self.Img.shape[1] - 64, 64):
                color_map[x:x+64,y:y+64,:] = colors[res[index]]
                index += 1
        
        fig = plt.figure(figsize=(20, 20))
        tmp = self.show_img(self.Img)
        plt.imshow(tmp)
        plt.imshow(color_map, alpha=.25)

        fig.savefig(self.outfile + "\\classified.png")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
